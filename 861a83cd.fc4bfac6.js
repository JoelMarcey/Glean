(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{101:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return u})),t.d(n,"default",(function(){return f}));var i=t(3),l=t(7),a=(t(0),t(129)),r=t(39),o=t(132),b=["components"],c={id:"running",title:"Running the Tools",sidebar_label:"Running the Tools"},s={unversionedId:"running",id:"running",isDocsHomePage:!1,title:"Running the Tools",description:"Configuration files",source:"@site/../docs/running.md",slug:"/running",permalink:"/docs/running",version:"current",sidebar_label:"Running the Tools",sidebar:"someSidebar",previous:{title:"Writing data to Glean",permalink:"/docs/write"},next:{title:"Using the Shell",permalink:"/docs/shell"}},u=[{value:"Configuration files",id:"configuration-files",children:[]},{value:"Common options",id:"common-options",children:[{value:"Connecting to a remote server",id:"connecting-to-a-remote-server",children:[]},{value:"Using local databases",id:"using-local-databases",children:[]},{value:"Testing options",id:"testing-options",children:[]}]}],p={toc:u};function f(e){var n=e.components,t=Object(l.a)(e,b);return Object(a.b)("wrapper",Object(i.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"configuration-files"},"Configuration files"),Object(a.b)("p",null,"Glean tools use some configuration files. Mostly these are optional,\nif you don't provide the file then a set of defaults will be assumed."),Object(a.b)("p",null,"Config files are represented as JSON-encoded Thrift values. Each\nconfiguaration file has a corresponding Thrift definition file, which\nwe'll link to in the docs below."),Object(a.b)("p",null,"The location of a config file is specified by a command line\noption, e.g. Glean clients have a ",Object(a.b)("inlineCode",{parentName:"p"},"--client-config")," option:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"--client-config (file:PATH | config:PATH)\n")),Object(a.b)("p",null,"the alternatives are:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Omit the flag: default values will be used."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--client-config file:PATH")," means the config is read, once, from ",Object(a.b)("inlineCode",{parentName:"li"},"PATH"),".")),Object(a.b)(r.FbInternalOnly,{mdxType:"FbInternalOnly"},Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--client-config config:PATH")," means the config is read from ",Object(a.b)("inlineCode",{parentName:"li"},"PATH"),"\nin configerator."))),Object(a.b)(r.OssOnly,{mdxType:"OssOnly"},Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--client-config config:PATH")," means the config is read from ",Object(a.b)("inlineCode",{parentName:"li"},"DIR/PATH"),"\nwhere ",Object(a.b)("inlineCode",{parentName:"li"},"DIR")," defaults to ",Object(a.b)("inlineCode",{parentName:"li"},"$HOME/.config/glean")," but can be changed with the ",Object(a.b)("inlineCode",{parentName:"li"},"--config-dir DIR")," flag. Additionally, changes in the file are picked up without restarting the tool. (this is particularly useful for the server)")),Object(a.b)("p",null,"The idea is that if you're running a fleet of Glean servers, you can\nhave a set of configuration files that you sync to all the hosts in\nyour fleet using whatever mechanism you want, and set ",Object(a.b)("inlineCode",{parentName:"p"},"--config-dir"),"\nto point to the location of the files.  If this isn't sufficient, then\nyou can implement your own ",Object(a.b)("inlineCode",{parentName:"p"},"ConfigProvider")," instance to support\nwhatever method you need for accessing config files.")),Object(a.b)("h2",{id:"common-options"},"Common options"),Object(a.b)("p",null,"All the Glean tools (",Object(a.b)("inlineCode",{parentName:"p"},"glean"),", ",Object(a.b)("inlineCode",{parentName:"p"},"glean-server"),", ",Object(a.b)("inlineCode",{parentName:"p"},"glean-shell"),") accept\nthe following options."),Object(a.b)(r.OssOnly,{mdxType:"OssOnly"},Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--config-dir DIR"),Object(a.b)("br",null),"\nThe base directory where ",Object(a.b)("a",{parentName:"li",href:"#configuration-files"},"configuration files")," are read from."))),Object(a.b)("h3",{id:"connecting-to-a-remote-server"},"Connecting to a remote server"),Object(a.b)(r.FbInternalOnly,{mdxType:"FbInternalOnly"},Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--service TIER or HOST:PORT"),Object(a.b)("br",null),Object(a.b)("strong",{parentName:"li"},"Default:")," taken from ",Object(a.b)("inlineCode",{parentName:"li"},"--client-config"),Object(a.b)("br",null),"\nSpecifies the Glean server to connect to.  ",Object(a.b)("inlineCode",{parentName:"li"},"TIER")," is\nimplementation-dependent (not supported in the open-source build\ncurrently)."))),Object(a.b)(r.OssOnly,{mdxType:"OssOnly"},Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--service HOST:PORT"),Object(a.b)("br",null),Object(a.b)("strong",{parentName:"li"},"Default:")," taken from ",Object(a.b)("inlineCode",{parentName:"li"},"--client-config"),Object(a.b)("br",null),"\nSpecifies the Glean server to connect to."))),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--client-config (file:PATH | config:PATH)"),Object(a.b)("br",null),Object(a.b)("strong",{parentName:"li"},"Default:"),Object(a.b)(o.a,{internal:"config:glean/client/client",external:"config:client",mdxType:"Alt"})," or use default values if missing",Object(a.b)("br",null),Object(a.b)("strong",{parentName:"li"},"Thrift file:")," ",Object(a.b)("a",{parentName:"li",href:"https://github.com/facebookincubator/Glean/blob/master/glean/config/client/client_config.thrift"},"client-config.thrift"),Object(a.b)("br",null),"\nThe location of the client configuration file, which specifies the\ndefault Glean server to connect to, amongst other things.")),Object(a.b)(r.FbInternalOnly,{mdxType:"FbInternalOnly"},Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--use-shards yes|no|fallback"),Object(a.b)("br",null),"\nFB-only: whether to use shards when connecting to a host in the tier."))),Object(a.b)("h3",{id:"using-local-databases"},"Using local databases"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"--db-root DIR"),Object(a.b)("br",null),"\nThe path where Glean databases are stored.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"--schema (file:FILE | dir:DIR | config:PATH | DIR)"),Object(a.b)("br",null),"\n",Object(a.b)("strong",{parentName:"p"},"Default"),": ",Object(a.b)(o.a,{internal:"config:glean/schema/all",external:"config:schema",mdxType:"Alt"}),Object(a.b)("br",null),"\nThe location of the schema definition. This can either be:"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"dir:DIR")," or just ",Object(a.b)("inlineCode",{parentName:"li"},"DIR"),Object(a.b)("br",null),"\nAll the files with the extension ",Object(a.b)("inlineCode",{parentName:"li"},".angle")," under ",Object(a.b)("inlineCode",{parentName:"li"},"DIR")," (or in\nsubdirectories) will be read."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"file:FILE")," or ",Object(a.b)("inlineCode",{parentName:"li"},"config:PATH"),Object(a.b)("br",null),"\nA single file, which can be created from the source files in ",Object(a.b)("inlineCode",{parentName:"li"},"DIR")," by running ",Object(a.b)("inlineCode",{parentName:"li"},"gen-schema --dir DIR --source FILE"),Object(a.b)("br",null),"\nIf you are running a fleet of Glean servers, you would normally\nsync schema changes across the fleet by putting the schema\nin ",Object(a.b)("inlineCode",{parentName:"li"},"config:schema"),"."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"--schema-version VERSION"),Object(a.b)("br",null)))),Object(a.b)(r.FbInternalOnly,{mdxType:"FbInternalOnly"},Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--recipe-config (file:PATH | config:PATH)"),Object(a.b)("br",null),Object(a.b)("strong",{parentName:"li"},"Default:")," ",Object(a.b)(o.a,{internal:"config:glean/recipes/recipes",external:"config:recipes",mdxType:"Alt"})," or use default values if missing",Object(a.b)("br",null),Object(a.b)("strong",{parentName:"li"},"Thrift file:")," ",Object(a.b)("a",{parentName:"li",href:"https://github.com/facebookincubator/Glean/blob/master/glean/config/recipes/recipes.thrift"},"recipe-config.thrift"),Object(a.b)("br",null),"\nThe location of the recipes config file. This is used by certain\nindexers to specify the indexing steps and dependencies between them."))),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"--server-config (file:PATH | config:PATH)"),Object(a.b)("br",null),"\n",Object(a.b)("strong",{parentName:"p"},"Default"),": ",Object(a.b)(o.a,{internal:"config:glean/server",external:"config:server",mdxType:"Alt"}),Object(a.b)("br",null),"\n",Object(a.b)("strong",{parentName:"p"},"Thrift file:")," ",Object(a.b)("a",{parentName:"p",href:"https://github.com/facebookincubator/Glean/blob/master/glean/config/server/server_config.thrift"},"server-config.thrift"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"--tier TIER"),Object(a.b)("br",null),"\nEquivalent to ",Object(a.b)(o.a,{internal:"--server-config config:glean/server/TIER",external:"--server-config config:server/TIER",mdxType:"Alt"}),Object(a.b)("br",null),"\nCan be handy when you have fleet-wide configuration files but you\nwant certain servers to have different configs.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"--db-read-only"),Object(a.b)("br",null),"\nDisable writing to databases. This is useful if you have servers that only\nserve queries, and should not be creating or writing databases."))),Object(a.b)(r.FbInternalOnly,{mdxType:"FbInternalOnly"},Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--enable-logging"),Object(a.b)("br",null),"\nEnable logging of all operations to Scuba."))),Object(a.b)(r.OssOnly,{mdxType:"OssOnly"},Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--enable-logging"),Object(a.b)("br",null),"\nEnable logging of all operations. (Note that there is currently no\nlogging backend implemented for the open-source build of Glean, so\nthis doesn't do anything yet)."))),Object(a.b)("h3",{id:"testing-options"},"Testing options"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"--db-schema-override"),Object(a.b)("br",null),"\nThe current schema will override the schema in the\ndatabase. Normally you don't want this, because the schema stored in\nthe database is the one that was active at the time when the DB was\ncreated, so it is likely to be a correct description of the data in\nthe database.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"--storage (rocksdb | memory)"),Object(a.b)("br",null),"\n",Object(a.b)("strong",{parentName:"p"},"Default:"),": ",Object(a.b)("inlineCode",{parentName:"p"},"rocksdb"),Object(a.b)("br",null))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"--db-mock-writes"),Object(a.b)("br",null),"\nAllow write operations, but discard the data and don't write it to the DB."))))}f.isMDXComponent=!0},129:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return O}));var i=t(0),l=t.n(i);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function b(e,n){if(null==e)return{};var t,i,l=function(e,n){if(null==e)return{};var t,i,l={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=l.a.createContext({}),s=function(e){var n=l.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return l.a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return l.a.createElement(l.a.Fragment,{},n)}},f=l.a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,r=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),u=s(t),f=i,O=u["".concat(r,".").concat(f)]||u[f]||p[f]||a;return t?l.a.createElement(O,o(o({ref:n},c),{},{components:t})):l.a.createElement(O,o({ref:n},c))}));function O(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,r=new Array(a);r[0]=f;var o={};for(var b in n)hasOwnProperty.call(n,b)&&(o[b]=n[b]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var c=2;c<a;c++)r[c]=t[c];return l.a.createElement.apply(null,r)}return l.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},132:function(e,n,t){"use strict";t.d(n,"b",(function(){return o})),t.d(n,"c",(function(){return b})),t.d(n,"a",(function(){return c}));var i=t(0),l=t.n(i),a=t(39);let r;function o(e){return l.a.createElement("a",{href:r+e.file},e.file)}function b(e){return l.a.createElement("a",{href:r+e.file},e.children)}r=Object(a.isInternal)()?"https://www.internalfb.com/code/fbsource/fbcode/":"https://github.com/facebookincubator/Glean/tree/master/";const c=({children:e,internal:n,external:t})=>Object(a.fbContent)({internal:l.a.createElement("code",null,n),external:l.a.createElement("code",null,t)})}}]);