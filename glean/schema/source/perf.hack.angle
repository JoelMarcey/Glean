schema perf.hack.1 {
import hack.4
import src.1


type FunctionName = string
type ScaledMillion = nat  # Float value multiplied by 1 million
type FileLine = {
    file : string,
    line : nat,
  }


# Hovercard data

# Function data
predicate FunctionData :
  { # Xenon function stats initialization - https://fburl.com/diffusion/jv3pk1i8
    function_name : hack.QName,   # $data['full_name']  https://fburl.com/diffusion/sadgumxv
                                # 0 - 1 https://fburl.com/diffusion/jue3onl2
    my_class : string,
    function_definition : FileLine,
    calls_per_request : ScaledMillion,
    inclusive_gcpu : ScaledMillion,           # data['inclusive_gcpu']  https://fburl.com/diffusion/s59bghmd
    exclusive_gcpu : ScaledMillion,           # data['exclusive_gcpu']  https://fburl.com/diffusion/66sj8x67
    total_samples : nat,            # $data['count']  https://fburl.com/diffusion/j5h1gr3g
    callers : [FunctionCallers],    # Top 3 - https://fburl.com/diffusion/emjj3h4y
    products : [FunctionProducts],  # Top 3 - https://fburl.com/diffusion/r51gsa5v
  }

type FunctionCallers =
  { # Base query - https://fburl.com/diffusion/exc2nq9b
      caller_name : perf.hack.FunctionName,     # $caller['caller'] https://fburl.com/diffusion/16t1znli
      caller_location : FileLine,            # $caller['file'], $caller['line']
      caller_call_percent : ScaledMillion,     # $data['callers']['count'] https://fburl.com/diffusion/wrp5fxza
  }

# Example:  Products: ads:app_signals (29.7%)m_android (20.3%)ads:ads_signals (12.3%)
type FunctionProducts =
  { # Base query - https://fburl.com/diffusion/e9j9geet
      product_name : string,  # $data['products']['product']
      product_call_percent : ScaledMillion,  # $data['products']['count']  https://fburl.com/diffusion/z2rlovnv
  }

# The data below is lower priority.
# Rendered in file lines.
# Query: https://fburl.com/diffusion/jee2ey2g
predicate ReturnPercentages :
  { # https://fburl.com/diffusion/fjcbbwk6
      location : src.Loc,               # ToDo Key to function FunctionDefinition
      function_name : hack.QName, # $entry->getFieldAsString('function_name')
      total_sample_count : nat,     # sum(function_to_count[fn[rows]] - https://fburl.com/diffusion/5ncw3wco
      return_counts : [ReturnCount],  # Iteration - https://fburl.com/diffusion/yehtdatq
  }

# Query: https://fburl.com/diffusion/luluf917
type ReturnCount = {
    lineNum: nat,             # $entry->getFieldAsInt('line_number')  https://fburl.com/diffusion/1hs0dfoi
    exit_sample_count : nat,  # $entry->getFieldAsInt('exit_count')
  }

predicate LoopCounts :
  { # https://fburl.com/code/0121g1m7
      location: src.Loc,              # XX , $row['line_number'] <- XX = $row['filename']?
      loop_counts : [LoopCount],  # https://fburl.com/diffusion/8a2hcxlf
  }

# Query: https://fburl.com/code/l1wk96cl
type LoopCount = { # Percentage is num_iterations / count https://fburl.com/diffusion/dvm95koc
    num_iterations: nat,    # $row['num_iterations']
    count : nat,            #  $row['count']
  }
}
