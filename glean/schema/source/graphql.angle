schema graphql.1 {

predicate Argument :
  {
    name: Value,
    value: Value,
  }

predicate Directive :
  {
    name: Value,
    arguments: [Argument],
  }

predicate DirectiveDef :
  {
    name: Value,
    argumentDefs: [InputValueDef],
    locations: [DirectiveDefLocation],
  }

type DirectiveDefLocation =
  enum {
    QUERY  |
    MUTATION |
    SUBSCRIPTION |
    FIELD |
    FRAGMENT_DEFINITION |
    FRAGMENT_SPREAD |
    INLINE_FRAGMENT |
    SCHEMA |
    SCALAR |
    OBJECT |
    FIELD_DEFINITION |
    ARGUMENT_DEFINITION |
    INTERFACE |
    UNION |
    ENUM |
    ENUM_VALUE |
    INPUT_OBJECT |
    INPUT_FIELD_DEFINITION |
  }

predicate EnumTypeDef :
  {
    name: Value,
    values: [Value],
    directives: [Directive],
  }

predicate Fragment :
  {
    name: Value,
    typeCondition: Value,
    variableDefs: [VariableDef],
    directives: [Directive],
    selectionSet: SelectionSet,
  }

predicate Field :
  {
    type: Value,
    name: Value,
    directives: [Directive],
    selectionSet: SelectionSet,
    arguments: [Argument],
    alias: maybe Value,
  }

predicate FieldDef :
  {
    name: Value,
    type: Value,
    argumentDefs: [InputValueDef],
    directives: [Directive],
  }

predicate InlineFragment :
  {
    inferredTypeCondition: Value,
    directives: [Directive],
    selectionSet: SelectionSet,
    typeCondition: maybe Value,
  }

predicate InputValueDef :
  {
    name: Value,
    type: Value,
    directives: [Directive],
    defaultValue: maybe Value,
  }

predicate InputObjectTypeDef :
  {
    name: Value,
    fields: [InputValueDef],
    directives: [Directive],
  }

predicate InterfaceTypeDef :
  {
    name: Value,
    fields: [FieldDef],
    directives: [Directive],
  }

predicate ObjectTypeDef :
  {
    name: Value,
    interfaces: [Value],
    fields: [FieldDef],
    directives: [Directive],
  }

predicate Query :
  {
    name: Value,
    directives: [Directive],
    variableDefs: [VariableDef],
    selectionSet: SelectionSet,
  }

predicate ScalarTypeDef :
  {
    name: Value,
    directives: [Directive],
  }

type SelectionSet =
  {
    fields: [Field],
    inlineFragments: [InlineFragment],
    fragmentSpreads: [Value],
  }

predicate UnionTypeDef :
  {
    name: Value,
    types: [Value],
    directives: [Directive],
  }

# used in queries / fragments
predicate VariableDef :
  {
    name: Value,
    type: Value,
    directives: [Directive],
    defaultValue: maybe Value,
  }

predicate Value : string

}
