(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{128:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,f=u["".concat(l,".").concat(d)]||u[d]||b[d]||i;return n?r.a.createElement(f,c(c({ref:t},o),{},{components:n})):r.a.createElement(f,c({ref:t},o))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,l[1]=c;for(var o=2;o<i;o++)l[o]=n[o];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return u}));var a=n(3),r=n(7),i=(n(0),n(128)),l=(n(39),["components"]),c={id:"advanced",title:"Advanced Query Features",sidebar_label:"Advanced Query Features"},s={unversionedId:"angle/advanced",id:"angle/advanced",isDocsHomePage:!1,title:"Advanced Query Features",description:"Types and signatures",source:"@site/../docs/angle/advanced.md",slug:"/angle/advanced",permalink:"/docs/angle/advanced",version:"current",sidebar_label:"Advanced Query Features",sidebar:"someSidebar",previous:{title:"Query Efficiency",permalink:"/docs/angle/efficiency"},next:{title:"Debugging",permalink:"/docs/angle/debugging"}},o=[{value:"Types and signatures",id:"types-and-signatures",children:[]},{value:"Explicit fact IDs",id:"explicit-fact-ids",children:[]},{value:"Functional predicates",id:"functional-predicates",children:[]}],p={toc:o};function u(e){var t=e.components,n=Object(r.a)(e,l);return Object(i.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"types-and-signatures"},"Types and signatures"),Object(i.b)("p",null,"Angle queries are ",Object(i.b)("em",{parentName:"p"},"strongly typed"),": the server will check your query for type-safety before executing it. Type-checking ensures that the query makes sense; that it's not trying to pattern-match strings against integers, or look for a field in a record that doesn't exist for example."),Object(i.b)("p",null,"Angle's type-checker isn't very clever, though. It mostly doesn't do type ",Object(i.b)("em",{parentName:"p"},"inference"),", it checks that expressions have the intended type. When it doesn't know the intended type of an expression, it uses a dumb inference mode that can only infer the type when it's really obvious: like a fact match, or a string."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-lang=angle"},'facts> P where C = { name = "Fish" }; example.Parent { C, P }\ncan\'t infer the type of: {name = "Fish"}\n    try adding a type annotation like ({name = "Fish"} : T)\n    or reverse the statement (Q = P instead of P = Q)\n')),Object(i.b)("p",null,"In cases like this, Angle's type-checker needs a bit of help. We can use a ",Object(i.b)("em",{parentName:"p"},"type signature")," to supply more information about the type:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-lang=angle"},'facts> P where C = { name = "Fish" } : example.Class; example.Parent { C, P }\n{ "id": 1024, "key": { "name": "Pet", "line": 10 } }\n')),Object(i.b)("p",null,"Here we used ",Object(i.b)("inlineCode",{parentName:"p"},'{ name = "Fish" } : example.Class'),' to tell Angle the expected type of the pattern. You should read the colon as "has type", and the type can be any valid Angle type, for details see ',Object(i.b)("a",{parentName:"p",href:"../schema/types"},"Built-in types"),"."),Object(i.b)("h2",{id:"explicit-fact-ids"},"Explicit fact IDs"),Object(i.b)("p",null,"Every fact has an ID, which is a 64-bit integer that uniquely identifies the fact in a particular database. You've probably noticed these fact IDs in the query results: every result has an ",Object(i.b)("inlineCode",{parentName:"p"},"id")," field with the fact ID, and a ",Object(i.b)("inlineCode",{parentName:"p"},"key")," field with the fact key."),Object(i.b)("p",null,"Most Angle queries don't need to mention fact IDs explicitly, but sometimes it's useful. For example, you might need to perform a query to fetch some results, do some custom filtering on the results and then query Glean again using some of the fact IDs from the first query."),Object(i.b)("p",null,"WARNING: a fact ID only makes sense in the context of a particular database, so make sure that your query that mentions fact IDs is being made on the same database that you obtained the fact ID from originally."),Object(i.b)("p",null,"Glean has a syntax for referring to fact IDs directly; for example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-lang=angle"},'facts> $1026 : example.Class\n{ "id": 1026, "key": { "name": "Fish", "line": 30 } }\n')),Object(i.b)("p",null,"the syntax is ",Object(i.b)("inlineCode",{parentName:"p"},"$<fact ID>"),", but you will often want to use it with a ",Object(i.b)("a",{parentName:"p",href:"#types-and-signatures"},"type signature"),", as ",Object(i.b)("inlineCode",{parentName:"p"},"$<fact ID> : <predicate>"),"."),Object(i.b)("p",null,"If you get the predicate wrong, Glean will complain:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-lang=angle"},"facts> $1026 : example.Parent\n*** Exception: fact has the wrong type\n")),Object(i.b)("p",null,"The type can be omitted only if it is clear from the context, for example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-lang=angle"},'facts> example.Parent { child = $1026 }\n{ "id": 1029, "key": { "child": { "id": 1026 }, "parent": { "id": 1024 } } }\n')),Object(i.b)("p",null,"Sometimes you might want to use multiple fact IDs in a query. Or-patterns come in handy here:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-lang=angle"},"facts> example.Parent { child = $1026 | $1027 }\n")),Object(i.b)("h2",{id:"functional-predicates"},"Functional predicates"),Object(i.b)("p",null,"All the predicates we've seen so far have been key-only predicates. A predicate can also have a ",Object(i.b)("em",{parentName:"p"},"value"),"; we call these ",Object(i.b)("em",{parentName:"p"},"functional predicates")," or ",Object(i.b)("em",{parentName:"p"},"key-value predicates"),"."),Object(i.b)("p",null,"For example, we might model a reference to a class in our example schema like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-lang=angle"},"predicate Reference :\n  { file : string, line : nat, column : nat } -> Class\n")),Object(i.b)("p",null,"This says that for a given (file,line,column) there can be at most one reference to a Class.  This uniqueness is the important property of a key-value predicate: for each key there is at most one value."),Object(i.b)("p",null,"We query for key-value predicates using this syntax:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-lang=angle"},'facts> C where example.Reference { file = "x", line = 1, column = 2 } -> C\n')),Object(i.b)("p",null,"The pattern after the ",Object(i.b)("inlineCode",{parentName:"p"},"->")," matches the value. It can be an arbitrary pattern, just like the key. Note that facts cannot be efficiently searched by value, so the pattern that matches the value is a filter only."))}u.isMDXComponent=!0}}]);